// ConsoleApplication1.cpp : Defines the entry point for the console application.
//


#include <opencv2/opencv.hpp>
#include <iostream>
#include<opencv2/video/video.hpp>
#include<opencv2/video/background_segm.hpp>


using namespace std;
using namespace cv;

//global variables

Mat frame;
Mat HSVframe;
Mat gray;
Mat mask;
Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat canny_output; //countours
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
vector<Mat> channels(3);

int main() {
    
    // Create a VideoCapture object and open the input file
    // If the input is the web camera, pass 0 instead of the video file name
    VideoCapture cap("pool.mp4");
    
    // Default resolution of the frame is obtained.The default resolution is system dependent.
    int frame_width = cap.get(CV_CAP_PROP_FRAME_WIDTH);
    int frame_height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);
    
    // Define the codec and create VideoWriter object.The output is stored in 'outcpp.avi' file.
    //VideoWriter video("outcpp.avi",CV_FOURCC('M','J','P','G'),10, Size(frame_width,frame_height));
    
    
    // Check if camera opened successfully
    if (!cap.isOpened()) {
        cout << "Error opening video stream or file" << endl;
        return -1;
    }
    
    bool Play = true;
    
    while (1) {
        
        // Capture frame-by-frame
        if (Play){
            cap >> frame;
            
            // If the frame is empty, break immediately
            if (frame.empty())
                break;
            
            blur(frame,frame, Size(5,5));
            
            //Canny(gray, gray, 20, 100, 3);
            
            
            cvtColor(frame, HSVframe, CV_BGR2HSV);
            split(HSVframe,channels);
            Mat hframe;
            hframe=channels[0];
            
            
            //calculate mean Hue channel // TODO better with histogram
            Scalar tempval = mean (hframe);
            float Hmean=tempval.val[0];
            float Umean=tempval.val[1];
            float Vmean=tempval.val[2];
            
            //threshold on the Hue channel
            float minthres = Hmean - 10;
            float maxthres = Hmean + 10;
            Scalar mintable = {minthres,0,0};
            Scalar maxtable = {maxthres,255,255};
            Mat threshold;
            inRange(HSVframe,mintable,maxtable,threshold);
            
            
            // Create a structuring element
            int erosion_size = 4;
            Mat element = getStructuringElement(cv::MORPH_CROSS,
                                                cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
                                                cv::Point(erosion_size, erosion_size) );
            
            // Apply erosion or dilation on the image
            erode(threshold,threshold,element);
            dilate(threshold,threshold,element);
            
        
            //Pool table line detection
            
            //Detect contours avec Canny
            Mat edges;
            Canny(frame,edges,90,110);
            
            
            
            vector<Vec4i> lines;
            lines.clear();
            HoughLinesP(edges, lines, 1, CV_PI / 180, 100, 100, 10);
            
            // Draw lines into image
            for (size_t i = 0; i < lines.size(); i++){
                Vec4i l = lines[i];
                line(frame, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(255, 255, 244), 2, CV_AA);
            }
            
            
            //Display video
            
            imshow("frame", frame);
            //imshow("drawing", drawing);
            //imshow("contours2", contours2);
            //imshow("hframe", hframe);
            //imshow("threshold", threshold);
            //imshow("frame", frame);
            
            // Write the frame into the file 'outcpp.avi'
            //video.write(frame);
            
        }
        
        //Press Space to pause
        char b = (char)waitKey(1);
        if (b == 'p')
            Play = !Play;
        
        
        // Press  ESC on keyboard to exit
        char c = (char)waitKey(25);
        if (c == 27)
            break;
        
    }
    
    // When everything done, release the video capture object
    cap.release();
    //video.release();
    
    // Closes all the frames
    destroyAllWindows();
    
    return 0;
}

